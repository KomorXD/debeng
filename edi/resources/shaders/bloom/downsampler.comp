#version 460 core

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (binding = 1) uniform sampler2D u_source_mip;
layout (binding = 2, rgba16f) writeonly uniform image2D u_target_mip;

uniform float u_mip;

void main() {
    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    ivec2 target_size = imageSize(u_target_mip);
    if (gid.x >= target_size.x || gid.y >= target_size.y)
        return;

    vec2 uv = (vec2(gid) + 0.5) / vec2(target_size);
    vec2 source_size = textureSize(u_source_mip, int(u_mip));
    vec2 texel_size = 1.0 / source_size;
    float x = texel_size.x * pow(1.2, u_mip);
    float y = texel_size.y * pow(1.2, u_mip);

    vec3 a = textureLod(u_source_mip, vec2(uv.x - 2*x, uv.y + 2*y), u_mip).rgb;
    vec3 b = textureLod(u_source_mip, vec2(uv.x      , uv.y + 2*y), u_mip).rgb;
    vec3 c = textureLod(u_source_mip, vec2(uv.x + 2*x, uv.y + 2*y), u_mip).rgb;

    vec3 d = textureLod(u_source_mip, vec2(uv.x - 2*x, uv.y), u_mip).rgb;
    vec3 e = textureLod(u_source_mip, vec2(uv.x      , uv.y), u_mip).rgb;
    vec3 f = textureLod(u_source_mip, vec2(uv.x + 2*x, uv.y), u_mip).rgb;

    vec3 g = textureLod(u_source_mip, vec2(uv.x - 2*x, uv.y - 2*y), u_mip).rgb;
    vec3 h = textureLod(u_source_mip, vec2(uv.x      , uv.y - 2*y), u_mip).rgb;
    vec3 i = textureLod(u_source_mip, vec2(uv.x + 2*x, uv.y - 2*y), u_mip).rgb;

    vec3 j = textureLod(u_source_mip, vec2(uv.x - x, uv.y + y), u_mip).rgb;
    vec3 k = textureLod(u_source_mip, vec2(uv.x + x, uv.y + y), u_mip).rgb;
    vec3 l = textureLod(u_source_mip, vec2(uv.x - x, uv.y - y), u_mip).rgb;
    vec3 m = textureLod(u_source_mip, vec2(uv.x + x, uv.y - y), u_mip).rgb;

    vec3 acc = vec3(e * 0.125);
    acc += vec3((a + c + g + i) * 0.03125);
    acc += vec3((b + d + f + h) * 0.0625);
    acc += vec3((j + k + l + m) * 0.125);
    acc = max(acc, 0.0001);

    imageStore(u_target_mip, gid, vec4(acc, 1.0));
}
