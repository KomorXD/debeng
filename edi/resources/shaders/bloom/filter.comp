#version 460 core

#define CAMERA_BINDING ${CAMERA_BINDING}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0) uniform sampler2D u_scene;

layout(binding = 1, rgba16f) uniform image2D u_bloom_first_mip;

layout (std140, binding = CAMERA_BINDING) uniform Camera {
    mat4 view_projection;
    mat4 projection;
    mat4 view;
    vec4 position;
    vec2 viewport;

    float exposure;
    float gamma;
    float near_clip;
    float far_clip;
    float fov;

    float bloom_strength;
    float bloom_threshold;
} u_camera;

vec3 pow_v3(vec3 v, float p) {
    return vec3(pow(v.x, p), pow(v.y, p), pow(v.z, p));
}

vec3 to_sRGB(vec3 v) {
    return pow_v3(v, 1.0 / u_camera.gamma);
}

float rgb_to_lum(vec3 color) {
    return dot(color, vec3(0.2126, 0.7152, 0.0722));
}

float karis_avg(vec3 color) {
    float lum = rgb_to_lum(to_sRGB(color)) * 0.25;
    return 1.0 / (1.0 + lum);
}

vec3 prefilter(vec3 color) {
    float brightness = max(color.r, max(color.g, color.b));
    float knee = 0.8 * u_camera.bloom_threshold;
    float t = max(brightness - u_camera.bloom_threshold, 0.0);
    float soft = t / (t + knee);

    return color * soft;
}

void main() {
    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(u_bloom_first_mip);
    if (gid.x >= size.x || gid.y >= size.y)
        return;

    vec2 texel_size = 1.0 / imageSize(u_bloom_first_mip);
    float x = texel_size.x;
    float y = texel_size.y;
    vec2 uv = (vec2(gid) + 0.5) / vec2(size);

    vec3 a = texture(u_scene, vec2(uv.x - 2*x, uv.y + 2*y)).rgb;
    vec3 b = texture(u_scene, vec2(uv.x      , uv.y + 2*y)).rgb;
    vec3 c = texture(u_scene, vec2(uv.x + 2*x, uv.y + 2*y)).rgb;

    vec3 d = texture(u_scene, vec2(uv.x - 2*x, uv.y)).rgb;
    vec3 e = texture(u_scene, vec2(uv.x      , uv.y)).rgb;
    vec3 f = texture(u_scene, vec2(uv.x + 2*x, uv.y)).rgb;

    vec3 g = texture(u_scene, vec2(uv.x - 2*x, uv.y - 2*y)).rgb;
    vec3 h = texture(u_scene, vec2(uv.x      , uv.y - 2*y)).rgb;
    vec3 i = texture(u_scene, vec2(uv.x + 2*x, uv.y - 2*y)).rgb;

    vec3 j = texture(u_scene, vec2(uv.x - x, uv.y + y)).rgb;
    vec3 k = texture(u_scene, vec2(uv.x + x, uv.y + y)).rgb;
    vec3 l = texture(u_scene, vec2(uv.x - x, uv.y - y)).rgb;
    vec3 m = texture(u_scene, vec2(uv.x + x, uv.y - y)).rgb;

    vec3 groups[5];
    groups[0] = (a + b + d + e) * (0.125 / 4.0);
    groups[1] = (b + c + e + f) * (0.125 / 4.0);
    groups[2] = (d + e + g + h) * (0.125 / 4.0);
    groups[3] = (e + f + h + i) * (0.125 / 4.0);
    groups[4] = (j + k + l + m) * (0.5 / 4.0);

    vec3 acc = vec3(0.0);
    for (int i = 0; i < 5; i++)
        acc += groups[i] * karis_avg(groups[i]);

    acc = prefilter(acc);
    acc = max(acc, 0.0001);
    acc = min(acc, 16.0);

    imageStore(u_bloom_first_mip, gid, vec4(acc, 1.0));
}
