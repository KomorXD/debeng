#version 460 core

#define CAMERA_BINDING ${CAMERA_BINDING}

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 1) uniform sampler2D u_source_mip;
layout(binding = 2, rgba16f) uniform image2D u_target_mip;

layout (std140, binding = CAMERA_BINDING) uniform Camera {
    mat4 view_projection;
    mat4 projection;
    mat4 view;
    vec4 position;
    vec2 viewport;

    float exposure;
    float gamma;
    float near_clip;
    float far_clip;
    float fov;

    float bloom_strength;
    float bloom_threshold;
} u_camera;

uniform float u_mip;

void main() {
    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    ivec2 target_size = imageSize(u_target_mip);
    if (gid.x >= target_size.x || gid.y >= target_size.y)
        return;

    vec2 uv = (vec2(gid) + 0.5) / vec2(target_size);
    vec2 texel_size = 1.0 / vec2(textureSize(u_source_mip, int(u_mip)));
    float x = texel_size.x * pow(1.2, u_mip);
    float y = texel_size.y * pow(1.2, u_mip);

    vec3 a = textureLod(u_source_mip, vec2(uv.x - x, uv.y + y), u_mip).rgb;
    vec3 b = textureLod(u_source_mip, vec2(uv.x    , uv.y + y), u_mip).rgb;
    vec3 c = textureLod(u_source_mip, vec2(uv.x + x, uv.y + y), u_mip).rgb;

    vec3 d = textureLod(u_source_mip, vec2(uv.x - x, uv.y), u_mip).rgb;
    vec3 e = textureLod(u_source_mip, vec2(uv.x    , uv.y), u_mip).rgb;
    vec3 f = textureLod(u_source_mip, vec2(uv.x + x, uv.y), u_mip).rgb;

    vec3 g = textureLod(u_source_mip, vec2(uv.x - x, uv.y - y), u_mip).rgb;
    vec3 h = textureLod(u_source_mip, vec2(uv.x    , uv.y - y), u_mip).rgb;
    vec3 i = textureLod(u_source_mip, vec2(uv.x + x, uv.y - y), u_mip).rgb;

    vec3 acc = e * 4.0;
    acc += (b + d + f + h) * 2.0;
    acc += a + c + g + i;
    acc *= 1.0 / 16.0f;

    vec3 curr = imageLoad(u_target_mip, gid).rgb;
    imageStore(u_target_mip, gid, vec4(acc + curr, 1.0));
}
