#version 460 core

#define CAMERA_BINDING ${CAMERA_BINDING}

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 0) uniform sampler2D u_scene;
layout(binding = 1) uniform sampler2D u_bloom;
layout(binding = 2, rgba16f) uniform image2D u_target;

layout (std140, binding = CAMERA_BINDING) uniform Camera {
    mat4 view_projection;
    mat4 projection;
    mat4 view;
    vec4 position;
    vec2 viewport;

    float exposure;
    float gamma;
    float near_clip;
    float far_clip;
    float fov;

    float bloom_strength;
    float bloom_threshold;
} u_camera;

void main() {
    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = textureSize(u_scene, 0);
    if (gid.x >= size.x || gid.y >= size.y)
        return;

    vec2 uv = (vec2(gid) + 0.5) / vec2(size);

    vec4 color = texture(u_scene, uv);
    vec3 bloom = texture(u_bloom, uv).rgb;
    color.rgb += bloom * u_camera.bloom_strength;

    vec3 mapped = vec3(1.0) - exp(-color.rgb * u_camera.exposure);
    mapped = pow(mapped, vec3(1.0 / u_camera.gamma));

    imageStore(u_target, gid, vec4(mapped, color.a));
}
